{"version":3,"sources":["components/weather/constants.js","store.js","components/weather/reducers.js","components/weather/utils.js","components/weather/actions.js","components/weather/TemperatureTypes.js","components/weather/NavigateDayCards.js","components/weather/BarChart.js","components/weather/TemperatureCard.js","components/weather/TemperatureCards.js","components/weather/Weather.js","App.js","serviceWorker.js","index.js"],"names":["initForm","city","weatherList","selectedDayWeather","tempType","pageIndex","pageSize","startIndex","isItemExist","appReducerList","combineReducers","Weather","state","action","type","featureKey","payload","store","createStore","composeWithDevTools","applyMiddleware","thunk","dispatch","pagedData","data","filter","index","convertTempToCelcius","temp","Math","round","convertTempToFar","makeRequest","api","options","Promise","resolve","reject","method","url","Axios","headers","rawHttp","then","response","JSON","parse","decodeResponse","catch","error","getWeatherDetails","params","cityWeather","list","reduce","weather","currDate","moment","dt_txt","format","currDayWeatherList","concat","Object","keys","result","key","push","date","dayWeather","avgTemp","a","b","main","length","mapCityWeatherList","setWeatherForm","weatherData","setTemperatureTypes","value","setPageNo","getState","undefined","setCardPagination","TemperatureTypes","props","FormControl","component","RadioGroup","aria-label","name","defaultValue","onChange","event","target","row","FormControlLabel","control","Radio","color","label","labelPlacement","NavigateDayCards","Grid","container","spacing","wrap","item","xs","sm","fontSize","onClick","header","role","BarChart","this","acc","element","temperature","temperatureLabel","mapWeatherBarChartData","splice","chartType","width","height","React","PureComponent","dateTextStyles","root","fontWeight","descriptionTextStyles","setCurrentDayWeatherInfo","e","TemperatureCard","averageTemperture","className","id","FormLabel","variant","styles","useStyles","makeStyles","theme","flexGrow","paper","padding","textAlign","palette","text","secondary","TemperatureCards","classes","map","Paper","renderTempCard","connect","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eca76c5f.chunk.js","sourcesContent":["const featureKey = \"WEATHER\";\r\nexport const SET_WEATHER_DATA = featureKey + \"/SET_WEATHER_DATA\";\r\nexport const SET_SELECTED_DAY_WEATHER_DATA =\r\n  featureKey + \"/SET_SELECTED_DAY_WEATHER_DATA\";\r\nexport const SET_SELECTED_SET_TEMPERTURE_TYPE =\r\n  featureKey + \"/SET_TEMPERTURE_TYPE\";\r\nexport const SET_PAGE_NO = featureKey + \"/SET_PAGE_NO\";\r\n\r\nexport const WEATHER_API =\r\n  \"https://api.openweathermap.org/data/2.5/forecast?q=Munich,de&APPID=75f972b80e26f14fe6c920aa6a85ad57&cnt=40\";\r\n\r\n  export const initForm = {\r\n    city: {},\r\n    weatherList: [],\r\n    selectedDayWeather: [],\r\n    tempType: null,\r\n    pageIndex: 0,\r\n    pageSize: 3,\r\n    startIndex: 0,\r\n    isItemExist: true\r\n  };\r\n  \r\n","import { combineReducers } from \"redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { Weather } from \"./components/weather/reducers\";\r\nconst appReducerList = combineReducers({\r\n  Weather\r\n});\r\n\r\nconst appReducers = (state, action) => {\r\n  return appReducerList(state, action);\r\n};\r\n\r\nconst store = createStore(\r\n  appReducers,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport const dispatch = store.dispatch;\r\nexport default store;\r\n","import {\r\n  SET_WEATHER_DATA,\r\n  SET_SELECTED_DAY_WEATHER_DATA,\r\n  SET_SELECTED_SET_TEMPERTURE_TYPE,\r\n  SET_PAGE_NO,\r\n  initForm\r\n} from \"./constants\";\r\n\r\n\r\nexport const Weather = (state = initForm, action) => {\r\n  switch (action.type) {\r\n    case SET_WEATHER_DATA:\r\n      return { ...state, city: action.city, weatherList: action.weatherList };\r\n    case SET_SELECTED_DAY_WEATHER_DATA:\r\n      return { ...state, selectedDayWeather: action.payload };\r\n    case SET_SELECTED_SET_TEMPERTURE_TYPE:\r\n      return { ...state, tempType: action.payload };\r\n    case SET_PAGE_NO:\r\n      return {\r\n        ...state,\r\n        pageIndex: action.pageIndex,\r\n        startIndex: action.startIndex,\r\n        isItemExist: action.isItemExist\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import moment from \"moment\";\r\nexport const mapCityWeatherList = (cityWeather = {}) => {\r\n  const list = cityWeather.list.reduce((weatherList, weather) => {\r\n    const currDate = moment(weather.dt_txt).format(\"D MMM YYYY\");\r\n    const currDayWeatherList = weatherList[currDate]\r\n      ? weatherList[currDate].concat({ ...weather })\r\n      : [{ ...weather }];\r\n    return {\r\n      ...weatherList,\r\n      [currDate]: currDayWeatherList\r\n    };\r\n  }, {});\r\n  return Object.keys(list).reduce((result, key) => {\r\n    result.push({\r\n      date: key,\r\n      dayWeather: list[key],\r\n      avgTemp: list[key].reduce((a, b) => a + b.main.temp, 0) / list[key].length\r\n    });\r\n    return result;\r\n  }, []);\r\n};\r\n\r\nexport const mapWeatherBarChartData = (data, tempType = null) => {\r\n  const result = data.reduce((acc, element) => {\r\n    const {\r\n      main: { temp = 0 }\r\n    } = element;\r\n    const temperature = tempType\r\n      ? tempType === \"C\"\r\n        ? convertTempToCelcius(temp)\r\n        : convertTempToFar(temp)\r\n      : temp;\r\n    const temperatureLabel = tempType ? `${temp} ${tempType}` : `${temp} F`;\r\n    acc.push([`${temperatureLabel}`, temperature, \"blue\"]);\r\n    return acc;\r\n  }, []);\r\n  return result;\r\n};\r\n\r\nexport const pagedData = (data, startIndex = 0, pageSize = 3) =>\r\n  data.filter(\r\n    (data, index) => index >= startIndex && index < startIndex + pageSize\r\n  );\r\n\r\nexport const convertTempToCelcius = temp => Math.round((temp * 9) / 5 + 32);\r\nexport const convertTempToFar = temp => Math.round(((temp - 32) * 5) / 9);\r\n\r\n\r\nexport function decodeResponse(response) {\r\n    if (!response) {\r\n      return;\r\n    }\r\n  \r\n    let data;\r\n  \r\n    switch (typeof response) {\r\n      case \"string\":\r\n        data = JSON.parse(response);\r\n        break;\r\n      case \"object\":\r\n        data = response.data;\r\n        break;\r\n      default:\r\n        data = {};\r\n    }\r\n  \r\n    return data;\r\n  }","import Axios from \"axios\";\r\nimport {\r\n  SET_WEATHER_DATA,\r\n  SET_SELECTED_DAY_WEATHER_DATA,\r\n  SET_SELECTED_SET_TEMPERTURE_TYPE,\r\n  SET_PAGE_NO,\r\n  WEATHER_API,\r\n} from \"./constants\";\r\nimport { mapCityWeatherList,decodeResponse } from \"./utils\";\r\n\r\n\r\n\r\nconst rawHttp = (method, url, options) => {\r\n  return Axios({\r\n    method,\r\n    url,\r\n    // data: options.params,\r\n    headers: options.headers ? options.headers : {}\r\n  });\r\n};\r\n\r\nexport const makeRequest = (api, options) => {\r\n  return new Promise((resolve, reject) => {\r\n    rawHttp(options.type, api, options)\r\n      .then(response => {\r\n        resolve(decodeResponse(response));\r\n      })\r\n      .catch(error => reject(error));\r\n  });\r\n};\r\n\r\nexport const getWeatherDetails = () => {\r\n  const api = WEATHER_API;\r\n  const options = {\r\n    headers: { \"Content-type\": \"application/json\" },\r\n    params: {}\r\n  };\r\n  return function(dispatch) {\r\n    makeRequest(api, options).then(response => {\r\n      const cityWeather = mapCityWeatherList(response);\r\n      dispatch(setWeatherForm(cityWeather));\r\n    });\r\n  };\r\n};\r\n\r\nexport const setWeatherForm = weatherData => {\r\n  return {\r\n    type: SET_WEATHER_DATA,\r\n    city: {},\r\n    weatherList: weatherData || []\r\n  };\r\n};\r\n\r\nexport const setSelectedDayWeather = data => {\r\n  return {\r\n    type: SET_SELECTED_DAY_WEATHER_DATA,\r\n    payload: data\r\n  };\r\n};\r\n\r\nexport const setTemperatureTypes = (key, value) => {\r\n  return {\r\n    type: SET_SELECTED_SET_TEMPERTURE_TYPE,\r\n    payload: value\r\n  };\r\n};\r\n\r\nexport const setCardPagination = ({\r\n  pageIndex,\r\n  startIndex,\r\n  pageSize,\r\n  isItemExist\r\n}) => {\r\n  return {\r\n    type: SET_PAGE_NO,\r\n    pageIndex,\r\n    startIndex,\r\n    isItemExist\r\n  };\r\n};\r\n\r\nexport const setPageNo = ({ pageIndex, startIndex, pageSize }) => {\r\n  return function(dispatch, getState) {\r\n    const weatherData = getState().Weather.weatherList;\r\n    const isItemExist = weatherData[startIndex + pageSize] !== undefined;\r\n    dispatch(\r\n      setCardPagination({ pageIndex, startIndex, pageSize, isItemExist })\r\n    );\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport { dispatch } from \"../../store\";\r\nimport { setTemperatureTypes } from \"./actions\";\r\n\r\nfunction TemperatureTypes(props) {\r\n  const onTempTypeChange = event => {\r\n    dispatch(setTemperatureTypes(\"tempType\", event.target.value));\r\n  };\r\n\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <RadioGroup\r\n        aria-label=\"position\"\r\n        name=\"position\"\r\n        value={props.tempType}\r\n        defaultValue={\"F\"}\r\n        onChange={onTempTypeChange}\r\n        row\r\n      >\r\n        <FormControlLabel\r\n          value=\"C\"\r\n          control={<Radio color=\"primary\" />}\r\n          label=\"Celcius\"\r\n          labelPlacement=\"Celcius\"\r\n        />\r\n        <FormControlLabel\r\n          value=\"F\"\r\n          control={<Radio color=\"primary\" />}\r\n          label=\"Fahrenheight\"\r\n          labelPlacement=\"Fahrenheight\"\r\n        />\r\n      </RadioGroup>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport { TemperatureTypes };\r\n","import * as React from \"react\";\r\nimport ArrowBack from \"@material-ui/icons/ArrowBack\";\r\nimport ArrowForward from \"@material-ui/icons/ArrowForward\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { dispatch } from \"../../store\";\r\nimport { setPageNo } from \"./actions\";\r\n\r\nexport const NavigateDayCards = props => {\r\n  const onNextPage = event => {\r\n    dispatch(\r\n      setPageNo({\r\n        pageIndex: props.pageIndex + 1,\r\n        startIndex: props.startIndex + props.pageSize\r\n      })\r\n    );\r\n  };\r\n  const onPerviousPage = event => {\r\n    dispatch(\r\n      setPageNo({\r\n        pageIndex: props.pageIndex - 1,\r\n        startIndex: props.startIndex - props.pageSize\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={1} wrap={\"wrap\"}>\r\n      <Grid item xs={6} sm={6}>\r\n        {props.pageIndex > 0 && (\r\n          <ArrowBack\r\n            color=\"primary\"\r\n            fontSize=\"large\"\r\n            onClick={() => {\r\n              onPerviousPage();\r\n            }}\r\n          />\r\n        )}\r\n      </Grid>\r\n      <Grid item xs={6} sm={6}>\r\n        {props.isItemExist && (\r\n          <ArrowForward\r\n            color=\"primary\"\r\n            fontSize=\"large\"\r\n            onClick={() => {\r\n              onNextPage();\r\n            }}\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Chart from \"react-google-charts\";\r\nimport { mapWeatherBarChartData } from \"./utils\";\r\nconst header = [\"Temperature\", `Temp`, { role: \"style\" }];\r\nclass BarChart extends React.PureComponent {\r\n  render() {\r\n    let { selectedDayWeather = [], tempType } = this.props;\r\n    const weatherData =\r\n      selectedDayWeather &&\r\n      mapWeatherBarChartData(selectedDayWeather, tempType);\r\n    weatherData.splice(0, 0, header);\r\n    return (\r\n      selectedDayWeather &&\r\n      selectedDayWeather.length > 0 && (\r\n        <Chart chartType=\"Bar\" width=\"100%\" height=\"300px\" data={weatherData} />\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport { BarChart };\r\n","import React from \"react\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport \"./weather.css\";\r\nimport { dispatch } from \"../../store\";\r\nimport { setSelectedDayWeather } from \"./actions\";\r\nimport { convertTempToCelcius, convertTempToFar } from \"./utils\";\r\nimport \"./weather.css\";\r\n\r\nconst dateTextStyles = {\r\n  root: {\r\n    color: \"#505050\",\r\n    fontWeight: 500\r\n  }\r\n};\r\n\r\nconst descriptionTextStyles = {\r\n  root: {\r\n    color: \"black\",\r\n    fontWeight: \"bold\"\r\n  }\r\n};\r\n\r\nconst setCurrentDayWeatherInfo = (weather, e) => {\r\n  dispatch(setSelectedDayWeather(weather));\r\n};\r\n\r\nfunction TemperatureCard(props) {\r\n  const { tempType = null, weather = {} } = props;\r\n  const { avgTemp = 0 } = weather;\r\n  const averageTemperture = tempType\r\n    ? tempType === \"C\"\r\n      ? convertTempToCelcius(avgTemp)\r\n      : convertTempToFar(avgTemp)\r\n    : avgTemp;\r\n  return (\r\n    <div\r\n      className=\"card\"\r\n      id={`card_${weather.date}`}\r\n      onClick={e => {\r\n        setCurrentDayWeatherInfo(props.weather, e);\r\n      }}\r\n    >\r\n      <Grid container spacing={1} wrap={\"wrap\"}>\r\n        <Grid item xs={12} sm={12}>\r\n          <FormLabel variant=\"large\" styles={dateTextStyles}>\r\n            Date:\r\n          </FormLabel>\r\n          <FormLabel variant=\"superLarge\" styles={dateTextStyles}>\r\n            {`${props.weather.date}`}\r\n          </FormLabel>{\" \"}\r\n        </Grid>\r\n        <Grid item xs={12} sm={12}>\r\n          <FormLabel variant=\"small\" styles={descriptionTextStyles}>\r\n            {`Temp ${averageTemperture} `}\r\n            {tempType ? tempType : \"F\"}\r\n          </FormLabel>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { TemperatureCard };\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { TemperatureCard } from \"./TemperatureCard\";\r\nimport { pagedData } from \"./utils\";\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary\r\n  }\r\n}));\r\n\r\nfunction TemperatureCards(props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container spacing={1} wrap={\"wrap\"}>\r\n      {renderTempCard(props, classes)}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction renderTempCard(props, classes) {\r\n  const weatherList = pagedData(\r\n    props.weatherList,\r\n    props.startIndex,\r\n    props.pageSize\r\n  );\r\n  return weatherList.map(weather => {\r\n    return (\r\n      <Grid item xs={4} sm={4} key={`${weather.date}`}>\r\n        <Paper className={classes.paper}>\r\n          <div className=\"card\" >\r\n            <TemperatureCard weather={weather} tempType={props.tempType} />\r\n          </div>\r\n        </Paper>\r\n      </Grid>\r\n    );\r\n  });\r\n}\r\n\r\nexport { TemperatureCards };\r\n","import * as React from \"react\";\r\nimport { TemperatureTypes } from \"./TemperatureTypes\";\r\nimport { NavigateDayCards } from \"./NavigateDayCards\";\r\nimport { BarChart } from \"./BarChart\";\r\nimport { TemperatureCards } from \"./TemperatureCards\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { getWeatherDetails } from \"./actions\";\r\nimport { dispatch } from \"../../store\";\r\nimport { connect } from \"react-redux\";\r\nclass Weather extends React.Component {\r\n  componentDidMount() {\r\n    dispatch(getWeatherDetails());\r\n  }\r\n  render() {\r\n    return (\r\n      <Grid container spacing={1} wrap={\"wrap\"}>\r\n        <Grid item xs={12} sm={12}>\r\n          <TemperatureTypes tempType={this.props.tempType} />\r\n        </Grid>\r\n        <Grid item xs={12} sm={12}>\r\n          <NavigateDayCards\r\n            pageIndex={this.props.pageIndex}\r\n            startIndex={this.props.startIndex}\r\n            pageSize={this.props.pageSize}\r\n            isItemExist={this.props.isItemExist}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={12}>\r\n          <TemperatureCards\r\n            weatherList={this.props.weatherList}\r\n            tempType={this.props.tempType}\r\n            pageIndex={this.props.pageIndex}\r\n            startIndex={this.props.startIndex}\r\n            pageSize={this.props.pageSize}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={12}>\r\n          <BarChart\r\n            selectedDayWeather={this.props.selectedDayWeather}\r\n            tempType={this.props.tempType}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ Weather }) => {\r\n  const {\r\n    weatherList = [],\r\n    selectedDayWeather = {},\r\n    tempType = null,\r\n    pageIndex,\r\n    pageSize,\r\n    startIndex,\r\n    isItemExist\r\n  } = Weather;\r\n  const { dayWeather = [] } = selectedDayWeather;\r\n  return {\r\n    weatherList: (weatherList && weatherList) || [],\r\n    selectedDayWeather: (dayWeather && dayWeather) || [],\r\n    tempType,\r\n    pageIndex,\r\n    startIndex,\r\n    pageSize,\r\n    isItemExist\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Weather);\r\n","import React from 'react';\nimport './App.css';\nimport  Weather  from './components/weather/Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Weather />\n    </div>\n  );\n}\n\nexport default App;\n// <header className=\"App-header\">\n// <img src={logo} className=\"App-logo\" alt=\"logo\" />\n// <p>\n//   Edit <code>src/App.js</code> and save to reload.\n// </p>\n// <a\n//   className=\"App-link\"\n//   href=\"https://reactjs.org\"\n//   target=\"_blank\"\n//   rel=\"noopener noreferrer\"\n// >\n//   Learn React\n// </a>\n// </header>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n      <Provider store={store}>\n          <App />\n      </Provider>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n  );\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}