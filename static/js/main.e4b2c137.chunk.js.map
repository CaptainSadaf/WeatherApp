{"version":3,"sources":["components/common/StyledRadio.js","components/weather/constants.js","components/loader/constants.js","store.js","components/weather/reducers.js","components/loader/reducers.js","components/weather/utils.js","components/loader/actions.js","components/common/Api.js","components/common/utils.js","components/weather/actions.js","components/weather/TemperatureTypes.js","components/weather/NavigateDayCards.js","components/common/Charts.js","components/weather/ColumnChart.js","components/weather/TemperatureCard.js","components/weather/TemperatureCards.js","components/weather/Weather.js","components/loader/Loader.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","backgroundColor","icon","borderRadius","width","height","boxShadow","backgroundImage","outline","outlineOffset","background","checkedIcon","display","content","StyledRadio","props","classes","Radio","className","disableRipple","color","clsx","initForm","city","weatherList","selectedDayWeather","tempType","pageIndex","pageSize","startIndex","isItemExist","initLoaderForm","isLoading","appReducerList","combineReducers","Weather","state","action","type","featureKey","payload","Loader","store","createStore","composeWithDevTools","applyMiddleware","thunk","dispatch","pagedData","data","filter","index","convertTempToCelcius","temp","Math","round","convertTempToFar","makeRequest","api","options","Promise","resolve","reject","rawHttp","then","response","JSON","parse","decodeResponse","catch","error","method","url","Axios","headers","getWeatherDetails","params","cityWeather","list","reduce","weather","currDate","moment","dt_txt","format","currDayWeatherList","concat","Object","keys","result","key","push","date","dayWeather","avgTemp","a","b","main","length","mapCityWeatherList","setWeatherForm","weatherData","setPageNo","getState","undefined","setCardPagination","onTempTypeChange","event","target","value","TemperatureTypes","FormControl","component","RadioGroup","onChange","e","row","FormControlLabel","checked","control","label","NavigateDayCards","Grid","container","spacing","wrap","item","xs","sm","fontSize","onClick","Charts","chartType","colors","header","ColumnChart","this","acc","element","dayTime","temperature","temperatureLabel","mapSelectedDayWeatherData","splice","React","PureComponent","dateTextStyles","fontWeight","descriptionTextStyles","setCurrentDayWeatherInfo","currentCard","document","getElementById","activeCards","querySelectorAll","i","len","classList","remove","add","setActiveCardColor","TemperatureCard","cards","getElementsByClassName","click","averageTemperture","id","FormLabel","variant","styles","Component","theme","flexGrow","paper","textAlign","palette","text","secondary","TemperatureCards","map","Paper","renderTempCard","justify","connect","CircularProgress","App","withRouter","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4b2c137.chunk.js","sourcesContent":["import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    \"&:hover\": {\r\n      backgroundColor: \"transparent\"\r\n    }\r\n  },\r\n  icon: {\r\n    borderRadius: \"50%\",\r\n    width: 16,\r\n    height: 16,\r\n    boxShadow:\r\n      \"inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)\",\r\n    backgroundColor: \"#f5f8fa\",\r\n    backgroundImage:\r\n      \"linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))\",\r\n    \"$root.Mui-focusVisible &\": {\r\n      outline: \"2px auto rgba(19,124,189,.6)\",\r\n      outlineOffset: 2\r\n    },\r\n    \"input:hover ~ &\": {\r\n      backgroundColor: \"#ebf1f5\"\r\n    },\r\n    \"input:disabled ~ &\": {\r\n      boxShadow: \"none\",\r\n      background: \"rgba(206,217,224,.5)\"\r\n    }\r\n  },\r\n  checkedIcon: {\r\n    backgroundColor: \"#137cbd\",\r\n    backgroundImage:\r\n      \"linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))\",\r\n    \"&:before\": {\r\n      display: \"block\",\r\n      width: 16,\r\n      height: 16,\r\n      backgroundImage: \"radial-gradient(#fff,#fff 28%,transparent 32%)\",\r\n      content: '\"\"'\r\n    },\r\n    \"input:hover ~ &\": {\r\n      backgroundColor: \"#106ba3\"\r\n    }\r\n  }\r\n});\r\n\r\nfunction StyledRadio(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Radio\r\n      className={classes.root}\r\n      disableRipple\r\n      color=\"default\"\r\n      checkedIcon={<span className={clsx(classes.icon, classes.checkedIcon)} />}\r\n      icon={<span className={classes.icon} />}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { StyledRadio };\r\n","const featureKey = \"WEATHER\";\r\nexport const SET_WEATHER_DATA = featureKey + \"/SET_WEATHER_DATA\";\r\nexport const SET_SELECTED_DAY_WEATHER_DATA =\r\n  featureKey + \"/SET_SELECTED_DAY_WEATHER_DATA\";\r\nexport const SET_SELECTED_SET_TEMPERTURE_TYPE =\r\n  featureKey + \"/SET_TEMPERTURE_TYPE\";\r\nexport const SET_PAGE_NO = featureKey + \"/SET_PAGE_NO\";\r\n\r\nexport const WEATHER_API =\r\n  \"https://api.openweathermap.org/data/2.5/forecast?q=Munich,de&APPID=75f972b80e26f14fe6c920aa6a85ad57&cnt=40\";\r\n\r\nexport const initForm = {\r\n  city: {},\r\n  weatherList: [],\r\n  selectedDayWeather: [],\r\n  tempType: \"F\",\r\n  pageIndex: 0,\r\n  pageSize: 3,\r\n  startIndex: 0,\r\n  isItemExist: true\r\n};\r\n","export const initLoaderForm = {\r\n  isLoading: false\r\n};\r\n\r\nexport const featureKey = \"LOADER\"; //unique key of Loader screen\r\nexport const SET_LOADER_IS_LOADING = featureKey + \"/SET_LOADER_IS_LOADING\";\r\n","import { combineReducers } from \"redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { Weather } from \"./components/weather/reducers\";\r\nimport { Loader } from \"./components/loader/reducers\";\r\nconst appReducerList = combineReducers({\r\n  Weather,\r\n  Loader\r\n});\r\n\r\nconst appReducers = (state, action) => {\r\n  return appReducerList(state, action);\r\n};\r\n\r\nconst store = createStore(\r\n  appReducers,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport const dispatch = store.dispatch;\r\nexport default store;\r\n","import {\r\n  SET_WEATHER_DATA,\r\n  SET_SELECTED_DAY_WEATHER_DATA,\r\n  SET_SELECTED_SET_TEMPERTURE_TYPE,\r\n  SET_PAGE_NO,\r\n  initForm\r\n} from \"./constants\";\r\n\r\n\r\nexport const Weather = (state = initForm, action) => {\r\n  switch (action.type) {\r\n    case SET_WEATHER_DATA:\r\n      return { ...state, city: action.city, weatherList: action.weatherList };\r\n    case SET_SELECTED_DAY_WEATHER_DATA:\r\n      return { ...state, selectedDayWeather: action.payload };\r\n    case SET_SELECTED_SET_TEMPERTURE_TYPE:\r\n      return { ...state, tempType: action.payload };\r\n    case SET_PAGE_NO:\r\n      return {\r\n        ...state,\r\n        pageIndex: action.pageIndex,\r\n        startIndex: action.startIndex,\r\n        isItemExist: action.isItemExist\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { SET_LOADER_IS_LOADING, initLoaderForm } from \"./constants\";\r\n\r\nexport const Loader = (state = initLoaderForm, action) => {\r\n  switch (action.type) {\r\n    case SET_LOADER_IS_LOADING:\r\n      return { ...state, isLoading: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import moment from \"moment\";\r\n\r\n//maping weather API response and group data by date\r\nexport const mapCityWeatherList = (cityWeather = {}) => {\r\n  const list = cityWeather.list.reduce((weatherList, weather) => {\r\n    const currDate = moment(weather.dt_txt).format(\"D MMM YYYY\");\r\n    const currDayWeatherList = weatherList[currDate]\r\n      ? weatherList[currDate].concat({ ...weather })\r\n      : [{ ...weather }];\r\n    return {\r\n      ...weatherList,\r\n      [currDate]: currDayWeatherList\r\n    };\r\n  }, {});\r\n  return Object.keys(list).reduce((result, key) => {\r\n    result.push({\r\n      date: key,\r\n      dayWeather: list[key],\r\n      avgTemp: Math.round(\r\n        list[key].reduce((a, b) => a + b.main.temp, 0) / list[key].length\r\n      )\r\n    });\r\n    return result;\r\n  }, []);\r\n};\r\n\r\n//map selected date weather data and comply it with google column chart data set.\r\nexport const mapSelectedDayWeatherData = (data, tempType = null) => {\r\n  const result = data.reduce((acc, element) => {\r\n    const {\r\n      main: { temp = 0 },\r\n      dt_txt\r\n    } = element;\r\n    const dayTime = moment(dt_txt).format(\"H:mm:ss\");\r\n    const temperature = tempType\r\n      ? tempType === \"C\"\r\n        ? convertTempToCelcius(temp)\r\n        : convertTempToFar(temp)\r\n      : temp;\r\n    const temperatureLabel = tempType\r\n      ? `${temperature}${tempType} (${dayTime})`\r\n      : `${temp}F (${dayTime})`;\r\n    acc.push([`${temperatureLabel}`, temperature]);\r\n    return acc;\r\n  }, []);\r\n  return result;\r\n};\r\n\r\n//filtering the data based on current page index and page size\r\nexport const pagedData = (data, startIndex = 0, pageSize = 3, maxLimit = 6) =>\r\n  data.filter(\r\n    (data, index) => index >= startIndex && index < startIndex + pageSize\r\n  );\r\n\r\n//Kalvin=>Celcius\r\nexport const convertTempToCelcius = temp => Math.round(temp - 273.15);\r\n\r\n//Kalvin=>Fahrenheight\r\nexport const convertTempToFar = temp => Math.round((temp - 273.15) * 1.8) + 32;\r\n\r\n//API response decode based on type of response\r\nexport const decodeResponse = response => {\r\n  if (!response) {\r\n    return;\r\n  }\r\n  let data;\r\n  switch (typeof response) {\r\n    case \"string\":\r\n      data = JSON.parse(response);\r\n      break;\r\n    case \"object\":\r\n      data = response.data;\r\n      break;\r\n    default:\r\n      data = {};\r\n  }\r\n  return data;\r\n};\r\n","import { SET_LOADER_IS_LOADING } from \"./constants\";\r\n\r\nexport const isLoading = isLoading => {\r\n  return {\r\n    type: SET_LOADER_IS_LOADING,\r\n    payload: isLoading\r\n  };\r\n};\r\n","import Axios from \"axios\";\r\nimport { decodeResponse } from \"./utils\";\r\n\r\n//common API call handle\r\nexport const makeRequest = (api, options) => {\r\n  return new Promise((resolve, reject) => {\r\n    rawHttp(options.type, api, options)\r\n      .then(response => {\r\n        resolve(decodeResponse(response));\r\n      })\r\n      .catch(error => reject(error));\r\n  });\r\n};\r\n\r\nconst rawHttp = (method, url, options) => {\r\n  return Axios({\r\n    method,\r\n    url,\r\n    // data: options.params,\r\n    headers: options.headers ? options.headers : {}\r\n  });\r\n};\r\n","//API response decode based on type of response\r\nexport const decodeResponse = response => {\r\n    if (!response) {\r\n      return;\r\n    }\r\n    let data;\r\n    switch (typeof response) {\r\n      case \"string\":\r\n        data = JSON.parse(response);\r\n        break;\r\n      case \"object\":\r\n        data = response.data;\r\n        break;\r\n      default:\r\n        data = {};\r\n    }\r\n    return data;\r\n  };\r\n  ","import {\r\n  SET_WEATHER_DATA,\r\n  SET_SELECTED_DAY_WEATHER_DATA,\r\n  SET_SELECTED_SET_TEMPERTURE_TYPE,\r\n  SET_PAGE_NO,\r\n  WEATHER_API\r\n} from \"./constants\";\r\nimport { mapCityWeatherList } from \"./utils\";\r\nimport { isLoading } from \"../loader/actions\";\r\nimport { makeRequest } from \"../common/Api\";\r\n\r\nexport const getWeatherDetails = () => {\r\n  const api = WEATHER_API;\r\n  const options = {\r\n    headers: { \"Content-type\": \"application/json\" },\r\n    params: {}\r\n  };\r\n  return function(dispatch) {\r\n    dispatch(isLoading(true));\r\n    makeRequest(api, options).then(response => {\r\n      const cityWeather = mapCityWeatherList(response);\r\n      dispatch(setWeatherForm(cityWeather));\r\n      dispatch(isLoading(false));\r\n    });\r\n  };\r\n};\r\n\r\nexport const setWeatherForm = weatherData => {\r\n  return {\r\n    type: SET_WEATHER_DATA,\r\n    city: {},\r\n    weatherList: weatherData || []\r\n  };\r\n};\r\n\r\nexport const setSelectedDayWeather = data => {\r\n  return {\r\n    type: SET_SELECTED_DAY_WEATHER_DATA,\r\n    payload: data\r\n  };\r\n};\r\n\r\nexport const setTemperatureTypes = (key, value) => {\r\n  return {\r\n    type: SET_SELECTED_SET_TEMPERTURE_TYPE,\r\n    payload: value\r\n  };\r\n};\r\n\r\nexport const setCardPagination = ({\r\n  pageIndex,\r\n  startIndex,\r\n  pageSize,\r\n  isItemExist\r\n}) => {\r\n  return {\r\n    type: SET_PAGE_NO,\r\n    pageIndex,\r\n    startIndex,\r\n    isItemExist\r\n  };\r\n};\r\n\r\nexport const setPageNo = ({ pageIndex, startIndex, pageSize }) => {\r\n  return function(dispatch, getState) {\r\n    const weatherData = getState().Weather.weatherList;\r\n    const isItemExist = weatherData[startIndex + pageSize] !== undefined;\r\n    dispatch(\r\n      setCardPagination({ pageIndex, startIndex, pageSize, isItemExist })\r\n    );\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport { StyledRadio } from \"../common/StyledRadio\";\r\nimport { dispatch } from \"../../store\";\r\nimport { setTemperatureTypes } from \"./actions\";\r\n\r\nconst onTempTypeChange = event => {\r\n  dispatch(setTemperatureTypes(\"tempType\", event.target.value));\r\n};\r\nfunction TemperatureTypes(props) {\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <RadioGroup\r\n        onChange={e => {\r\n          onTempTypeChange(e);\r\n        }}\r\n        row\r\n      >\r\n        <FormControlLabel\r\n          value=\"C\"\r\n          checked={props.tempType === \"C\"}\r\n          control={<StyledRadio />}\r\n          label=\"Celcius\"\r\n        />\r\n        <FormControlLabel\r\n          value=\"F\"\r\n          checked={props.tempType === \"F\"}\r\n          control={<StyledRadio />}\r\n          label=\"Fahrenheight\"\r\n        />\r\n      </RadioGroup>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport { TemperatureTypes };\r\n","import * as React from \"react\";\r\nimport ArrowBack from \"@material-ui/icons/ArrowBack\";\r\nimport ArrowForward from \"@material-ui/icons/ArrowForward\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { dispatch } from \"../../store\";\r\nimport { setPageNo } from \"./actions\";\r\n\r\nexport const NavigateDayCards = props => {\r\n  const onNextPage = event => {\r\n    dispatch(\r\n      setPageNo({\r\n        pageIndex: props.pageIndex + 1,\r\n        startIndex: props.startIndex + props.pageSize,\r\n        pageSize: props.pageSize\r\n      })\r\n    );\r\n  };\r\n  const onPerviousPage = event => {\r\n    dispatch(\r\n      setPageNo({\r\n        pageIndex: props.pageIndex - 1,\r\n        startIndex: props.startIndex - props.pageSize,\r\n        pageSize: props.pageSize\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={1} wrap={\"wrap\"}>\r\n      <Grid item xs={6} sm={6}>\r\n        {props.pageIndex > 0 && (\r\n          <ArrowBack\r\n            color=\"primary\"\r\n            fontSize=\"large\"\r\n            onClick={() => {\r\n              onPerviousPage();\r\n            }}\r\n          />\r\n        )}\r\n      </Grid>\r\n      <Grid item xs={6} sm={6}>\r\n        {props.isItemExist && (\r\n          <ArrowForward\r\n            color=\"primary\"\r\n            fontSize=\"large\"\r\n            onClick={() => {\r\n              onNextPage();\r\n            }}\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Chart from \"react-google-charts\";\r\nexport const Charts = ({\r\n  data,\r\n  chartType = \"ColumnChart\",\r\n  width = \"100%\",\r\n  height = \"350px\",\r\n  options = {\r\n    backgroundColor: \"white\",\r\n    colors: [\"cornflowerblue\"]\r\n  },\r\n  props\r\n}) => {\r\n  return (\r\n    <Chart\r\n      chartType={chartType}\r\n      data={data}\r\n      width={width}\r\n      height={height}\r\n      options={options}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { mapSelectedDayWeatherData } from \"./utils\";\r\nimport { Charts } from \"../common/Charts\";\r\nconst header = [\"Temperature\", `Temperature`];\r\nclass ColumnChart extends React.PureComponent {\r\n  render() {\r\n    let { selectedDayWeather = [], tempType } = this.props;\r\n    const weatherData =\r\n      selectedDayWeather &&\r\n      mapSelectedDayWeatherData(selectedDayWeather, tempType);\r\n    weatherData.splice(0, 0, header);\r\n    return (\r\n      selectedDayWeather &&\r\n      selectedDayWeather.length > 0 && <Charts data={weatherData} />\r\n    );\r\n  }\r\n}\r\n\r\nexport { ColumnChart };\r\n","import React from \"react\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport \"./weather.css\";\r\nimport { dispatch } from \"../../store\";\r\nimport { setSelectedDayWeather } from \"./actions\";\r\nimport { convertTempToCelcius, convertTempToFar } from \"./utils\";\r\nimport \"./weather.css\";\r\n\r\nconst dateTextStyles = {\r\n  root: {\r\n    color: \"#505050\",\r\n    fontWeight: 500\r\n  }\r\n};\r\n\r\nconst descriptionTextStyles = {\r\n  root: {\r\n    color: \"black\",\r\n    fontWeight: \"bold\"\r\n  }\r\n};\r\n\r\nconst setActiveCardColor = weather => {\r\n  const currentCard = document.getElementById(`card_${weather.date}`);\r\n  if (currentCard) {\r\n    const activeCards = document.querySelectorAll(\".weather-card.active\");\r\n    for (let i = 0, len = activeCards.length; i < len; i++) {\r\n      activeCards[i].classList.remove(\"active\");\r\n    }\r\n    currentCard.classList.add(\"active\");\r\n  }\r\n};\r\n\r\nconst setCurrentDayWeatherInfo = (event, weather) => {\r\n  dispatch(setSelectedDayWeather(weather));\r\n  setActiveCardColor(weather);\r\n};\r\n\r\nclass TemperatureCard extends React.Component {\r\n  componentDidMount() {\r\n    //It will show the bar chart of first weather card.\r\n    const cards = document.getElementsByClassName(\"weather-card\");\r\n    if (cards) {\r\n      cards[0].click();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { props } = this;\r\n    const { tempType = null, weather = {} } = props;\r\n    const { avgTemp = 0 } = weather;\r\n    const averageTemperture = tempType\r\n      ? tempType === \"C\"\r\n        ? convertTempToCelcius(avgTemp)\r\n        : convertTempToFar(avgTemp)\r\n      : avgTemp;\r\n    return (\r\n      <div\r\n        className=\"weather-card\"\r\n        id={`card_${weather.date}`}\r\n        onClick={e => {\r\n          setCurrentDayWeatherInfo(e, props.weather);\r\n        }}\r\n      >\r\n        <Grid container spacing={1} wrap={\"wrap\"}>\r\n          <Grid item xs={12} sm={12}>\r\n            <FormLabel variant=\"large\" styles={dateTextStyles}>\r\n              Date:\r\n            </FormLabel>\r\n            <FormLabel variant=\"superLarge\" styles={dateTextStyles}>\r\n              {`${props.weather.date}`}\r\n            </FormLabel>{\" \"}\r\n          </Grid>\r\n          <Grid item xs={12} sm={12}>\r\n            <FormLabel variant=\"small\" styles={descriptionTextStyles}>\r\n              {`Temp ${averageTemperture} `}\r\n              {tempType ? tempType : \"F\"}\r\n            </FormLabel>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TemperatureCard };\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { TemperatureCard } from \"./TemperatureCard\";\r\nimport { pagedData } from \"./utils\";\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  paper: {\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary\r\n  }\r\n}));\r\n\r\nfunction TemperatureCards(props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container spacing={1} wrap={\"wrap\"}>\r\n      {renderTempCard(props, classes)}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction renderTempCard(props, classes) {\r\n  const weatherList = pagedData(\r\n    props.weatherList,\r\n    props.startIndex,\r\n    props.pageSize\r\n  );\r\n  return weatherList.map(weather => {\r\n    return (\r\n      <Grid item xs={4} sm={4} key={`${weather.date}`}>\r\n        <Paper className={classes.paper}>\r\n          <div className=\"card\">\r\n            <TemperatureCard weather={weather} tempType={props.tempType} />\r\n          </div>\r\n        </Paper>\r\n      </Grid>\r\n    );\r\n  });\r\n}\r\n\r\nexport { TemperatureCards };\r\n","import * as React from \"react\";\r\nimport { TemperatureTypes } from \"./TemperatureTypes\";\r\nimport { NavigateDayCards } from \"./NavigateDayCards\";\r\nimport { ColumnChart } from \"./ColumnChart\";\r\nimport { TemperatureCards } from \"./TemperatureCards\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Weather extends React.Component {\r\n  render() {\r\n    return (\r\n      <Grid container justify=\"center\" spacing={1} wrap={\"wrap\"}>\r\n        <Grid item xs={12} sm={12}>\r\n          <TemperatureTypes\r\n            tempType={this.props.tempType}\r\n            onTempTypeChange={this.onTempTypeChange}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={12}>\r\n          <NavigateDayCards\r\n            pageIndex={this.props.pageIndex}\r\n            startIndex={this.props.startIndex}\r\n            pageSize={this.props.pageSize}\r\n            isItemExist={this.props.isItemExist}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={12}>\r\n          <TemperatureCards\r\n            weatherList={this.props.weatherList}\r\n            tempType={this.props.tempType}\r\n            pageIndex={this.props.pageIndex}\r\n            startIndex={this.props.startIndex}\r\n            pageSize={this.props.pageSize}\r\n            avgTemp={this.props.selectedDayWeather.avgTemp || null}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={12}>\r\n          <ColumnChart\r\n            selectedDayWeather={this.props.selectedDayWeather}\r\n            tempType={this.props.tempType}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ Weather }) => {\r\n  const {\r\n    weatherList = [],\r\n    selectedDayWeather = {},\r\n    tempType = null,\r\n    pageIndex,\r\n    pageSize,\r\n    startIndex,\r\n    isItemExist\r\n  } = Weather;\r\n  const { dayWeather = [] } = selectedDayWeather;\r\n  return {\r\n    weatherList: (weatherList && weatherList) || [],\r\n    selectedDayWeather: (dayWeather && dayWeather) || [],\r\n    tempType,\r\n    pageIndex,\r\n    startIndex,\r\n    pageSize,\r\n    isItemExist\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Weather);\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport \"./loader.css\";\r\nclass Loader extends React.Component {\r\n  render() {\r\n    const { isLoading } = this.props;\r\n    return (\r\n      <div>\r\n        {isLoading && (\r\n          <div className={\"loader\"}>\r\n            <CircularProgress />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ Loader }) => ({\r\n  isLoading: Loader.isLoading\r\n});\r\n\r\nexport default connect(mapStateToProps)(Loader);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Weather from \"./components/weather/Weather\";\nimport Loader from \"./components/loader/Loader\";\nimport { Route, Redirect, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getWeatherDetails } from \"./components/weather/actions\";\nimport { dispatch } from \"./store\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    //componentDidMount can be replaced with react hook\n    dispatch(getWeatherDetails()); //get city weather details\n  }\n  render() {\n    const { isLoading } = this.props;\n    return (\n      <div className=\"App\">\n        <Weather />\n        \n      </div>\n    );\n  }\n}\n\nexport const mapStateToProps = ({ Loader = {} }) => ({\n  isLoading: Loader.isLoading //if data fetched then isLoading set to false\n});\nexport default withRouter(connect(mapStateToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n      <Provider store={store}>\n          <App />\n      </Provider>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n  );\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}